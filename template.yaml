#Path parameter:: Path: /view/cons/food/{id}

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SmartDogHouse-Serverless
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize : 256
  Api:
    EndpointConfiguration: REGIONAL
    Cors:
      AllowMethods: "'POST, GET'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
      MaxAge: "'600'"
#      AllowCredentials: true 

Parameters:
  TableName:
    Type: String
    Default: 'SmartDogHouse_Websock_Conn_Table'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  NotificationsTopic:
    Type: String
    Default: "Notifications"
    Description: (Required) Provide a topic for the IoT Notifications channel.
  ESPspecificTopic:
    Type: String
    Default: "ESP"
    Description: (Required) Provide a topic for the IoT channel specific.
    

# More info about API Event Sources: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
# More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------REST-API-TRIGGERED---------------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------

Resources:  
  GetEnvironmentLogs:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambda/
      Policies:
      - AmazonDynamoDBFullAccess
      Handler: app.getEnvironmentLogs
      Runtime: nodejs14.x
      Events:
        EnvironmentLogs:
          Type: HttpApi 
          Properties:
            Path: /view/logs/env
            Method: get
  SetVitalParamRangesByDog:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambda/
      Policies:
      - AmazonDynamoDBFullAccess
      Handler: app.setVitalParamRangesByDog
      Runtime: nodejs14.x
      Events:
        VitalParamRangesByDogSetting:
          Type: Api 
          Properties:
            Path: /set/ranges/vital/dog
            Method: post
  SetVitalParamRangesBySize:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambda/
      Policies:
      - AmazonDynamoDBFullAccess
      Handler: app.setVitalParamRangesBySize
      Runtime: nodejs14.x
      Events:
        VitalParamRangesBySizeSetting:
          Type: Api 
          Properties:
            Path: /set/ranges/vital/size
            Method: post
  SetConsRangesBySize:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambda/
      Policies:
      - AmazonDynamoDBFullAccess
      Handler: app.setConsRangesBySize
      Runtime: nodejs14.x
      Events:
        ConsRangesBySizeSetting:
          Type: Api 
          Properties:
            Path: /set/ranges/cons/size
            Method: post
  SetConsRangesByDog:
      Type: AWS::Serverless::Function 
      Properties:
        CodeUri: lambda/
        Policies:
        - AmazonDynamoDBFullAccess
        Handler: app.setConsRangesByDog
        Runtime: nodejs14.x
        Events:
          ConsRangesByDogSetting:
            Type: Api 
            Properties:
              Path: /set/ranges/cons/dog
              Method: post
  SetFoodScheduleBySize:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambda/
      Policies:
      - AmazonDynamoDBFullAccess
      Handler: app.setFoodScheduleBySize
      Runtime: nodejs14.x
      Events:
        FoodScheduleBySizeSetting:
          Type: Api 
          Properties:
            Path: /set/schedule/size
            Method: post
  SetFoodScheduleByDog:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambda/
      Policies:
      - AmazonDynamoDBFullAccess
      Handler: app.setFoodScheduleByDog
      Runtime: nodejs14.x
      Events:
        FoodScheduleByDogSetting:
          Type: Api 
          Properties:
            Path: /set/schedule/dog
            Method: post

  GetLogsByDog:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambda/
      Policies:
      - AmazonDynamoDBFullAccess
      Handler: app.getLogsByDog
      Runtime: nodejs14.x
      Events:
        LogsByDog:
          Type: Api 
          Properties:
            Path: /view/logs/dog
            Method: get

  GetDogs:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambda/
      Policies:
      - AmazonDynamoDBFullAccess
      Handler: app.getDogs
      Runtime: nodejs14.x
      Events:
        Dogs:
          Type: Api 
          Properties:
            Path: /view/dogs
            Method: get
  GetTotalCosumption:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambda/
      Policies:
      - AmazonDynamoDBFullAccess
      Handler: app.getTotalCosumption
      Runtime: nodejs14.x
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /view/logs/dog/total
            Method: get

  # GetFoodConsumptionByDog:
  #   Type: AWS::Serverless::Function 
  #   Properties:
  #     CodeUri: lambda/
  #     Policies:
  #     - AmazonDynamoDBFullAccess
  #     Handler: app.getFoodConsumptionByDog
  #     Runtime: nodejs14.x
  #     Events:
  #       HelloWorld:
  #         Type: Api 
  #         Properties:
  #           Path: /view/cons/food
  #           Method: get


##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------CRONO-TRIGGERED---------------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------

  WaterConsumptionAlarm:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: lambda/
      Handler: app.waterConsumptionAlarm
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - AmazonDynamoDBFullAccess
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleNotificationWebSocket}/*'
      Events:
        CWScheduleWaterConsumption:
          Type: Schedule
          Properties: #'rate(2 minutes)'
            Schedule: 'cron(0 0 * * ? *)'
            Name: WaterConsumptionAlarmSchedule
            Description: The function check at midnigth the day water consumption in serch anomalies
            Enabled: false

  FoodConsumptionAlarm:
      Type: AWS::Serverless::Function 
      Properties:
        CodeUri: lambda/
        Handler: app.foodConsumptionAlarm
        Runtime: nodejs14.x
        Environment:
          Variables:
            TABLE_NAME: !Ref TableName
        Policies:
        - AmazonDynamoDBFullAccess
        - Statement:
          - Effect: Allow
            Action:
            - 'execute-api:ManageConnections'
            Resource:
            - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleNotificationWebSocket}/*'
        Events:
          CWScheduleFoodConsumption:
            Type: Schedule
            Properties: #'rate(2 minutes)'
              Schedule: 'cron(0 0 * * ? *)'
              Name: FoodConsumptionAlarmSchedule
              Description: The function check at midnigth the day food consumption in serch anomalies
              Enabled: false


##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------MQTT-TRIGGERED----------------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------


  SaveDetection:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/
      Handler: app.saveDetection
      Runtime: nodejs14.x
      Environment:
      Policies:
      - AmazonDynamoDBFullAccess
      Events:
        IoT:
          Type: IoTRule
          Properties:
            AwsIotSqlVersion: 2016-03-23
            Sql: !Sub "SELECT * FROM '${ESPspecificTopic}'"


##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------WEBSOCKET-TRIGGERED-----------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------
##-----------------------------------------------------------------------------------------------------------------------

  SimpleNotificationWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SimpleNotificationWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleNotificationWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleNotificationWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleNotificationWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleNotificationWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleNotificationWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleNotificationWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref SimpleNotificationWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleNotificationWebSocket
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref TableName
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/websock/
      Handler: Connect.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotificationWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/websock/
      Handler: Disconnect.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotificationWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/websock/
      Handler: SendMsg.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - AmazonDynamoDBFullAccess
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleNotificationWebSocket}/*'
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotificationWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com
  SendNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/websock/
      Handler: SendNotifications.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleNotificationWebSocket}/*'
      Events:
        IoT:
          Type: IoTRule
          Properties:
            AwsIotSqlVersion: 2016-03-23
            Sql: !Sub "SELECT * FROM '${NotificationsTopic}'"




  SendNotificationPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleNotificationWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendNotificationFunction
      Principal: apigateway.amazonaws.com

Outputs:
# ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
# Find out more about other implicit resources you can reference within SAM
# https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#  GetWaterConsumptionByDogApi:
#    Description: "API Gateway endpoint URL for Prod stage for GetWaterConsumptionByDog function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#  GetWaterConsumptionByDogFunction:
#    Description: "GetWaterConsumptionByDog Lambda Function ARN"
#    Value: !GetAtt GetWaterConsumptionByDog.Arn
# GetWaterConsumptionByDogIamRole:
#   Description: "Implicit IAM Role created for GetWaterConsumptionByDog"
#   Value: !GetAtt GetWaterConsumptionByDogRole.Arn

#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------WEBSOCKET---------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  SendMessageFunctionArn:
    Description: "SendMessage function ARN"
    Value: !GetAtt SendMessageFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref SimpleNotificationWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]




